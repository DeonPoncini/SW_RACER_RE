import os
import re
import sys

from pathlib import Path

# automatically generate a hook entry for any function annotated with
# // <address> HOOK

# for any function annotated with // <address> (anything else), generate a
# reverse hook back to the built in function

# put in a list of .c files to scan as input and .h files they depend on

# get the project root directory
script_dir = Path(os.path.dirname(os.path.realpath(__file__)))
project_root = script_dir.parent.absolute()

output_file_c = os.path.join(project_root, "src", "hook_generated.c")
output_file_h = os.path.join(project_root, "src", "hook_generated.h")

# split the input into c files and h files
c_files = []
h_files = []
for item in sys.argv[1:]:
    if item.endswith(".c"):
        c_files.append(item)
    elif item.endswith(".h"):
        h_files.append(item)

hook_regex = re.compile(r"//\s*(0x[0-9A-Fa-f]{8})\s+HOOK\s*")
no_hook_regex = re.compile(r"//\s*(0x[0-9A-Fa-f]{8})\s+")
function_match = re.compile(r"(\w+)(?=\()")
comment_match = re.compile(r"^\s*(//|\/\*)")

hook_count = 0
total_count = 0
hook_address = ""
next_line_is_hooked = False
next_line_is_reverse_hooked = False
with open(output_file_c, "w", encoding="ascii") as file:
    file.write("// This file is autogenerated by GenerateHooks.py\n\n")
    file.write("#include <stdio.h>\n")
    file.write("#include \"hook.h\"\n")
    for h_include in h_files:
        file.write("#include \"" + h_include + "\"\n")
    file.write("\n")
    file.write("void hook_generated(FILE* hook_log)\n")
    file.write("{\n")
    for source in c_files:
        with open(source, "r") as sourcefile:
            lines = sourcefile.readlines()
            for line in lines:
                if next_line_is_hooked:
                    next_line_is_hooked = False
                    # check if function is commented out
                    c = comment_match.search(line)
                    if c != None:
                        continue
                    # otherwise capture function name
                    f = function_match.search(line)
                    if f != None:
                        function_name = f.group(1)
                        file.write("\tfprintf(hook_log, \"\t[Replace] " + function_name + " -> " + hook_address + "\\n\");\n");
                        file.write("\thook_function(" + hook_address +
                                   ", (uint8_t*)" + function_name + ");\n")
                        hook_count += 1
                        total_count += 1
                    continue
                if next_line_is_reverse_hooked:
                    next_line_is_reverse_hooked = False
                    # check if function is commented out
                    c = comment_match.search(line)
                    if c != None:
                        continue
                    f = function_match.search(line)
                    if f != None:
                        function_name = f.group(1)
                        file.write("\tfprintf(hook_log, \"\t[Original] " + function_name + " <- " + hook_address + "\\n\");\n");
                        file.write("\thook_function((uint32_t)" + function_name +
                                   ", (uint8_t*)" + hook_address + ");\n")
                        total_count += 1
                    continue
                h = hook_regex.search(line)
                if h != None:
                    hook_address = h.group(1)
                    next_line_is_hooked = True
                    continue
                h = no_hook_regex.search(line)
                if h != None:
                    hook_address = h.group(1)
                    next_line_is_reverse_hooked = True
                    continue
    percent = float(hook_count)/float(total_count) * 100.0
    file.write("fprintf(hook_log, \"Hooked [" + str(hook_count) + "/" + str(total_count) + "] functions (" + str(round(percent,2)) + "%)\\n\");\n")
    file.write("fflush(hook_log);\n")
    file.write("}\n")

# write out a header to use this function
with open(output_file_h, "w", encoding="ascii") as file:
    file.write("// This file is autogenerated by GenerateHooks.py\n\n")
    file.write("#ifndef HOOK_GENERATED_H\n")
    file.write("#define HOOK_GENERATED_H\n")
    file.write("#include <stdio.h>\n")
    file.write("void hook_generated(FILE* hook_log);\n")
    file.write("#endif // HOOK_GENERATED_H\n")
